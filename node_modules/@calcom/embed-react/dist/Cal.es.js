var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import require$$0, { useState, useEffect, useRef } from "react";
const EMBED_LIB_URL = "https://app.cal.com/embed/embed.js";
function EmbedSnippet(url = EMBED_LIB_URL) {
  (function(C, A, L) {
    let p2 = function(a, ar) {
      a.q.push(ar);
    };
    let d = C.document;
    C.Cal = C.Cal || function() {
      let cal = C.Cal;
      let ar = arguments;
      if (!cal.loaded) {
        cal.ns = {};
        cal.q = cal.q || [];
        d.head.appendChild(d.createElement("script")).src = A;
        cal.loaded = true;
      }
      if (ar[0] === L) {
        const api = function() {
          p2(api, arguments);
        };
        const namespace = ar[1];
        api.q = api.q || [];
        typeof namespace === "string" ? (cal.ns[namespace] = api) && p2(api, ar) : p2(cal, ar);
        return;
      }
      p2(cal, ar);
    };
  })(window, url, "init");
  /*!  Copying ends here. */
  return window.Cal;
}
EmbedSnippet.toString();
function useEmbed(embedJsUrl) {
  const [globalCal, setGlobalCal] = useState();
  useEffect(() => {
    setGlobalCal(() => {
      return EmbedSnippet(embedJsUrl);
    });
  }, []);
  return globalCal;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f = require$$0, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: true, ref: true, __self: true, __source: true };
function q(c, a, g) {
  var b, d = {}, e = null, h = null;
  g !== void 0 && (e = "" + g);
  a.key !== void 0 && (e = "" + a.key);
  a.ref !== void 0 && (h = a.ref);
  for (b in a)
    m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
  if (c && c.defaultProps)
    for (b in a = c.defaultProps, a)
      d[b] === void 0 && (d[b] = a[b]);
  return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
}
reactJsxRuntime_production_min.Fragment = l;
reactJsxRuntime_production_min.jsx = q;
reactJsxRuntime_production_min.jsxs = q;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
const jsx = jsxRuntime.exports.jsx;
const jsxs = jsxRuntime.exports.jsxs;
const Cal = function Cal2(props) {
  const _a = props, {
    calLink,
    calOrigin,
    config,
    embedJsUrl
  } = _a, restProps = __objRest(_a, [
    "calLink",
    "calOrigin",
    "config",
    "embedJsUrl"
  ]);
  if (!calLink) {
    throw new Error("calLink is required");
  }
  const initializedRef = useRef(false);
  const Cal3 = useEmbed(embedJsUrl);
  const ref = useRef(null);
  useEffect(() => {
    if (!Cal3 || initializedRef.current) {
      return;
    }
    initializedRef.current = true;
    const element = ref.current;
    let initConfig = {};
    if (calOrigin) {
      initConfig.origin = calOrigin;
    }
    Cal3("init", initConfig);
    Cal3("inline", {
      elementOrSelector: element,
      calLink,
      config
    });
  }, [Cal3, calLink, config, calOrigin]);
  if (!Cal3) {
    return /* @__PURE__ */ jsxs("div", __spreadProps(__spreadValues({}, restProps), {
      children: ["Loading ", calLink, " "]
    }));
  }
  return /* @__PURE__ */ jsx("div", __spreadValues({
    ref
  }, restProps));
};
const getCalApi = () => new Promise(function tryReadingFromWindow(resolve) {
  EmbedSnippet();
  const api = window.Cal;
  if (!api) {
    setTimeout(() => {
      tryReadingFromWindow(resolve);
    }, 50);
    return;
  }
  resolve(api);
});
export { Cal as default, getCalApi };
