import { methods, UiConfig } from "./embed-iframe";
import { SdkActionManager } from "./sdk-action-manager";
declare module "*.css";
declare type Namespace = string;
declare type Config = {
    origin: string;
    debug?: boolean;
};
export declare type Instruction = [method: string, argument: any] | [method: string, argument: any][];
export declare type InstructionQueue = Instruction[];
export declare class Cal {
    iframe?: HTMLIFrameElement;
    __config: Config;
    modalBox: Element;
    inlineEl: Element;
    namespace: string;
    actionManager: SdkActionManager;
    iframeReady: boolean;
    iframeDoQueue: {
        method: keyof typeof methods;
        arg: any;
    }[];
    static actionsManagers: Record<Namespace, SdkActionManager>;
    static getQueryObject(config: Record<string, string>): {
        guest: string;
    };
    processInstruction(instruction: Instruction): [method: string, argument: any][] | undefined;
    processQueue(queue: InstructionQueue): void;
    createIframe({ calLink, queryObject, }: {
        calLink: string;
        queryObject?: Record<string, string | string[] | Record<string, string>>;
    }): HTMLIFrameElement;
    init(namespaceOrConfig?: string | Config, config?: Config): void;
    getConfig(): Config;
    /**
     * It is an instruction that adds embed iframe inline as last child of the element
     */
    inline({ calLink, elementOrSelector, config, }: {
        calLink: string;
        elementOrSelector: string | HTMLElement;
        config: Record<string, string>;
    }): void;
    floatingButton({ calLink, buttonText, hideButtonIcon, attributes, buttonPosition, buttonColor, buttonTextColor, }: {
        calLink: string;
        buttonText?: string;
        attributes?: Record<string, string>;
        hideButtonIcon?: boolean;
        buttonPosition?: "bottom-left" | "bottom-right";
        buttonColor: string;
        buttonTextColor: string;
    }): void;
    modal({ calLink, config, uid }: {
        calLink: string;
        config?: Record<string, string>;
        uid: number;
    }): void;
    on({ action, callback, }: {
        action: Parameters<SdkActionManager["on"]>[0];
        callback: Parameters<SdkActionManager["on"]>[1];
    }): void;
    off({ action, callback, }: {
        action: Parameters<SdkActionManager["on"]>[0];
        callback: Parameters<SdkActionManager["on"]>[1];
    }): void;
    preload({ calLink }: {
        calLink: string;
    }): void;
    ui(uiConfig: UiConfig): void;
    doInIframe({ method, arg, }: {
        method: "ui";
        arg: Parameters<typeof methods["ui"]>[0];
    } | {
        method: "parentKnowsIframeReady";
        arg: undefined;
    }): void;
    constructor(namespace: string, q: InstructionQueue);
}
export interface GlobalCal {
    (methodName: string, arg?: any): void;
    /** Marks that the embed.js is loaded. Avoids re-downloading it. */
    loaded?: boolean;
    /** Maintains a queue till the time embed.js isn't loaded */
    q?: InstructionQueue;
    /** If user registers multiple namespaces, those are available here */
    ns?: Record<string, GlobalCal>;
    instance?: Cal;
    __css?: string;
    fingerprint?: string;
    __logQueue?: any[];
}
export interface CalWindow extends Window {
    Cal?: GlobalCal;
}
export {};
//# sourceMappingURL=embed.d.ts.map