import { CSSProperties } from "react";
export interface UiConfig {
    theme?: "dark" | "light" | "auto";
    styles?: EmbedStyles;
}
declare global {
    interface Window {
        CalEmbed: {
            __logQueue?: any[];
            embedStore: any;
        };
        CalComPageStatus: string;
        CalComPlan: string;
    }
}
interface EmbedStyles {
    body?: Pick<CSSProperties, "background">;
    eventTypeListItem?: Pick<CSSProperties, "background" | "color" | "backgroundColor">;
    enabledDateButton?: Pick<CSSProperties, "background" | "color" | "backgroundColor">;
    disabledDateButton?: Pick<CSSProperties, "background" | "color" | "backgroundColor">;
    availabilityDatePicker?: Pick<CSSProperties, "background" | "color" | "backgroundColor">;
}
interface EmbedNonStylesConfig {
    /** Default would be center */
    align: "left";
    branding?: {
        brandColor?: string;
        lightColor?: string;
        lighterColor?: string;
        lightestColor?: string;
        highlightColor?: string;
        darkColor?: string;
        darkerColor?: string;
        medianColor?: string;
    };
}
export declare const useEmbedTheme: () => string | null;
export declare const useEmbedStyles: (elementName: keyof EmbedStyles) => Pick<CSSProperties, "background">;
export declare const useEmbedNonStylesConfig: (elementName: keyof EmbedNonStylesConfig) => "left" | {
    brandColor?: string | undefined;
    lightColor?: string | undefined;
    lighterColor?: string | undefined;
    lightestColor?: string | undefined;
    highlightColor?: string | undefined;
    darkColor?: string | undefined;
    darkerColor?: string | undefined;
    medianColor?: string | undefined;
};
export declare const useIsBackgroundTransparent: () => boolean;
export declare const useBrandColors: () => {
    brandColor?: string | undefined;
    lightColor?: string | undefined;
    lighterColor?: string | undefined;
    lightestColor?: string | undefined;
    highlightColor?: string | undefined;
    darkColor?: string | undefined;
    darkerColor?: string | undefined;
    medianColor?: string | undefined;
};
export declare const useIsEmbed: () => boolean;
export declare const useEmbedType: () => string | null | undefined;
export declare const methods: {
    ui: (uiConfig: UiConfig) => number | undefined;
    parentKnowsIframeReady: () => void;
};
export {};
//# sourceMappingURL=embed-iframe.d.ts.map