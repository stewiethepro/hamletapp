"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.trackEventBatch = exports.trackEvent = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _client = require("./client");

var TRACK_EVENT = "\n  mutation TrackEvent($trackingId: String!) {\n    trackEvent(trackingId: $trackingId) {\n      id\n    }\n  }\n";

var trackEvent = function trackEvent(client) {
  return /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(trackingId) {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (client) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", Promise.resolve(undefined));

            case 2:
              _context.next = 4;
              return client.mutation(TRACK_EVENT, {
                trackingId: trackingId
              }).toPromise();

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

exports.trackEvent = trackEvent;
var TRACK_EVENT_BATCH = "\n  mutation BatchTrackEvent($eventType: String!) {\n    batchTrackEvent(eventType: $eventType) {\n      ids\n    }\n  }\n";

var trackEventBatch = function trackEventBatch(client) {
  return /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(eventType) {
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (client) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", Promise.resolve(undefined));

            case 2:
              _context2.next = 4;
              return client.mutation(TRACK_EVENT_BATCH, {
                eventType: eventType
              }).toPromise();

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
};

exports.trackEventBatch = trackEventBatch;

var _default = function _default(params) {
  var client = (0, _client.createCourierClient)(params);
  return {
    trackEvent: trackEvent(client),
    trackEventBatch: trackEventBatch(client)
  };
};

exports["default"] = _default;