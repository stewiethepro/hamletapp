"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.getMessageLists = exports.getMessages = exports.QUERY_MESSAGES = exports.getMessageCount = exports.GET_MESSAGE_COUNT = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _client = require("./client");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var GET_MESSAGE_COUNT = "\n  query MessageCount($params: FilterParamsInput) {\n    messageCount(params: $params)\n  }\n";
exports.GET_MESSAGE_COUNT = GET_MESSAGE_COUNT;

var getMessageCount = function getMessageCount(client) {
  return /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(params) {
      var _results$data;

      var results;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (client) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", Promise.resolve());

            case 2:
              _context.next = 4;
              return client.query(GET_MESSAGE_COUNT, {
                params: params
              }).toPromise();

            case 4:
              results = _context.sent;
              return _context.abrupt("return", results === null || results === void 0 ? void 0 : (_results$data = results.data) === null || _results$data === void 0 ? void 0 : _results$data.messageCount);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

exports.getMessageCount = getMessageCount;
var messagesProps = "{\n  totalCount\n  pageInfo {\n    startCursor\n    hasNextPage\n  }\n  nodes {\n    id\n    messageId\n    created\n    read\n    tags\n    content {\n      title\n      body\n      blocks {\n        ... on TextBlock {\n          type\n          text\n        }\n        ... on ActionBlock {\n          type\n          text\n          url\n        }\n      }\n      data\n      trackingIds {\n        archiveTrackingId\n        clickTrackingId\n        deliverTrackingId\n        readTrackingId\n        unreadTrackingId\n      }\n    }\n  }\n}";
var QUERY_MESSAGES = "\n  query GetMessages($params: FilterParamsInput, $limit: Int = 10, $after: String){\n    messages(params: $params, limit: $limit, after: $after) ".concat(messagesProps, "\n  }\n");
exports.QUERY_MESSAGES = QUERY_MESSAGES;

var getMessages = function getMessages(client) {
  return /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(params, after) {
      var _results$data2, _results$data2$messag, _results$data3, _results$data3$messag, _results$data3$messag2;

      var _ref3, limit, restParams, results, messages, startCursor;

      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (client) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", Promise.resolve(undefined));

            case 2:
              _ref3 = params !== null && params !== void 0 ? params : {}, limit = _ref3.limit, restParams = (0, _objectWithoutProperties2["default"])(_ref3, ["limit"]);
              _context2.next = 5;
              return client.query(QUERY_MESSAGES, {
                after: after,
                limit: limit,
                params: restParams
              }).toPromise();

            case 5:
              results = _context2.sent;
              messages = results === null || results === void 0 ? void 0 : (_results$data2 = results.data) === null || _results$data2 === void 0 ? void 0 : (_results$data2$messag = _results$data2.messages) === null || _results$data2$messag === void 0 ? void 0 : _results$data2$messag.nodes;
              startCursor = results === null || results === void 0 ? void 0 : (_results$data3 = results.data) === null || _results$data3 === void 0 ? void 0 : (_results$data3$messag = _results$data3.messages) === null || _results$data3$messag === void 0 ? void 0 : (_results$data3$messag2 = _results$data3$messag.pageInfo) === null || _results$data3$messag2 === void 0 ? void 0 : _results$data3$messag2.startCursor;
              return _context2.abrupt("return", {
                appendMessages: Boolean(after),
                messages: messages,
                startCursor: startCursor
              });

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
};

exports.getMessages = getMessages;

var getMessageLists = function getMessageLists(client) {
  return /*#__PURE__*/function () {
    var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(lists) {
      var _Object$keys;

      var limit,
          initialReduction,
          _lists$reduce,
          args,
          queries,
          variables,
          QUERY,
          results,
          response,
          _args3 = arguments;

      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              limit = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 10;

              if (!(!client || !lists)) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt("return", Promise.resolve(undefined));

            case 3:
              initialReduction = {
                args: [],
                queries: [],
                variables: {}
              };
              _lists$reduce = lists.reduce(function (acc, cur) {
                acc.args.push("$".concat(cur.id, "Params: FilterParamsInput"));
                acc.queries.push("".concat(cur.id, ": messages(params: $").concat(cur.id, "Params, limit: $limit) ").concat(messagesProps));
                acc.variables["".concat(cur.id, "Params")] = cur.filters;
                return acc;
              }, initialReduction), args = _lists$reduce.args, queries = _lists$reduce.queries, variables = _lists$reduce.variables;
              QUERY = "query GetMessageLists(".concat(args, ", $limit: Int = 10){\n      ").concat(queries.join(""), "\n    }");
              _context3.next = 8;
              return client.query(QUERY, _objectSpread(_objectSpread({}, variables), {}, {
                limit: limit
              })).toPromise();

            case 8:
              results = _context3.sent;
              response = (_Object$keys = Object.keys(results.data)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.reduce(function (acc, listName) {
                var _results$data$listNam;

                acc[listName] = {
                  messages: results.data[listName].nodes,
                  startCursor: (_results$data$listNam = results.data[listName].pageInfo) === null || _results$data$listNam === void 0 ? void 0 : _results$data$listNam.startCursor
                };
                return acc;
              }, {});
              return _context3.abrupt("return", response);

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4) {
      return _ref4.apply(this, arguments);
    };
  }();
};

exports.getMessageLists = getMessageLists;

var _default = function _default(params) {
  var client = (0, _client.createCourierClient)(params);
  return {
    getMessageCount: getMessageCount(client),
    getMessageLists: getMessageLists(client),
    getMessages: getMessages(client)
  };
};

exports["default"] = _default;