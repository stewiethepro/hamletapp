"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.getInitialState = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _brands = require("./brands");

var _client = require("./client");

var buildQuery = function buildQuery(_ref) {
  var skipFetchBrand = _ref.skipFetchBrand,
      brandId = _ref.brandId;

  if (skipFetchBrand) {
    return "\n      query InitialState($params: FilterParamsInput) {\n        messageCount(params: $params)\n    ";
  }

  if (brandId) {
    return "\n      query InitialState($brandId: String!, $params: FilterParamsInput) {\n        messageCount(params: $params)\n        brand(brandId: $brandId) {\n          ".concat(_brands.brandProps, "\n        }\n    ");
  }

  return "\n    query InitialState($params: FilterParamsInput) {\n      messageCount(params: $params)\n      inAppBrand {\n        ".concat(_brands.brandProps, "\n      }\n    } \n  ");
};

var getInitialState = function getInitialState(client) {
  return /*#__PURE__*/function () {
    var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref2) {
      var _results$data, _brand$settings, _brand$settings2, _brand$preferenceTemp, _results$data$message, _results$data2;

      var skipFetchBrand, brandId, from, QUERY, results, brandProp, brand, colors, inapp, preferenceTemplates;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              skipFetchBrand = _ref2.skipFetchBrand, brandId = _ref2.brandId, from = _ref2.from;

              if (client) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", Promise.resolve(undefined));

            case 3:
              QUERY = buildQuery({
                skipFetchBrand: skipFetchBrand,
                brandId: brandId
              });
              _context.next = 6;
              return client.query(QUERY, {
                brandId: brandId,
                params: {
                  from: from,
                  isRead: false
                }
              }).toPromise();

            case 6:
              results = _context.sent;
              brandProp = brandId ? "brand" : "inAppBrand";
              brand = results === null || results === void 0 ? void 0 : (_results$data = results.data) === null || _results$data === void 0 ? void 0 : _results$data[brandProp];
              colors = brand === null || brand === void 0 ? void 0 : (_brand$settings = brand.settings) === null || _brand$settings === void 0 ? void 0 : _brand$settings.colors;
              inapp = brand === null || brand === void 0 ? void 0 : (_brand$settings2 = brand.settings) === null || _brand$settings2 === void 0 ? void 0 : _brand$settings2.inapp;
              preferenceTemplates = brand === null || brand === void 0 ? void 0 : (_brand$preferenceTemp = brand.preferenceTemplates) === null || _brand$preferenceTemp === void 0 ? void 0 : _brand$preferenceTemp.nodes;
              return _context.abrupt("return", {
                brand: {
                  colors: colors,
                  inapp: inapp,
                  preferenceTemplates: preferenceTemplates
                },
                unreadMessageCount: (_results$data$message = results === null || results === void 0 ? void 0 : (_results$data2 = results.data) === null || _results$data2 === void 0 ? void 0 : _results$data2.messageCount) !== null && _results$data$message !== void 0 ? _results$data$message : 0
              });

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }();
};

exports.getInitialState = getInitialState;

var _default = function _default(params) {
  var client = (0, _client.createCourierClient)(params);
  return {
    getInitialState: getInitialState(client)
  };
};

exports["default"] = _default;