"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _reactHooks = require("@trycourier/react-hooks");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useLocalStorageMessages = function useLocalStorageMessages(clientKey, userId) {
  var _useInbox = (0, _reactHooks.useInbox)(),
      messages = _useInbox.messages,
      rehydrateMessages = _useInbox.rehydrateMessages,
      startCursor = _useInbox.startCursor,
      tabs = _useInbox.tabs,
      unreadMessageCount = _useInbox.unreadMessageCount;

  var localStorageKey = (0, _react.useMemo)(function () {
    if (!clientKey || !userId) {
      return;
    }

    return "".concat(clientKey, "/").concat(userId, "/messages");
  }, [clientKey, userId]);
  (0, _react.useEffect)(function () {
    if (!localStorageKey) {
      return;
    }

    var localStorageState = window.localStorage.getItem(localStorageKey);

    if (localStorageState) {
      try {
        var _JSON$parse = JSON.parse(localStorageState),
            _unreadMessageCount = _JSON$parse.unreadMessageCount,
            _messages = _JSON$parse.messages,
            _tabs = _JSON$parse.tabs,
            _startCursor = _JSON$parse.startCursor;

        rehydrateMessages({
          messages: _messages,
          startCursor: _startCursor,
          tabs: _tabs,
          unreadMessageCount: _unreadMessageCount
        });
      } catch (ex) {
        console.log("error", ex);
      }
    }
  }, [localStorageKey]);
  (0, _react.useEffect)(function () {
    var _messages$length;

    if (!localStorageKey) {
      return;
    }

    var hasMoreThan10Messages = ((_messages$length = messages === null || messages === void 0 ? void 0 : messages.length) !== null && _messages$length !== void 0 ? _messages$length : 0) > 10;
    window.localStorage.setItem(localStorageKey, JSON.stringify({
      messages: messages === null || messages === void 0 ? void 0 : messages.slice(0, 10),
      startCursor: hasMoreThan10Messages ? undefined : startCursor,
      unreadMessageCount: unreadMessageCount,
      tabs: tabs === null || tabs === void 0 ? void 0 : tabs.map(function (tab) {
        var _tabState$messages$le, _tabState$messages, _tabState$messages2;

        if (!tab.state) {
          return tab;
        } // only save first 10 messages in state


        var tabState = tab.state;
        var tabHasMoreThan10 = ((_tabState$messages$le = tabState === null || tabState === void 0 ? void 0 : (_tabState$messages = tabState.messages) === null || _tabState$messages === void 0 ? void 0 : _tabState$messages.length) !== null && _tabState$messages$le !== void 0 ? _tabState$messages$le : 0) > 10;
        return _objectSpread(_objectSpread({}, tab), {}, {
          state: {
            messages: tabState === null || tabState === void 0 ? void 0 : (_tabState$messages2 = tabState.messages) === null || _tabState$messages2 === void 0 ? void 0 : _tabState$messages2.slice(0, 10),
            startCursor: tabHasMoreThan10 ? undefined : tabState.startCursor
          }
        });
      })
    }));
  }, [localStorageKey, messages, startCursor, tabs, unreadMessageCount]);
};

var _default = useLocalStorageMessages;
exports["default"] = _default;