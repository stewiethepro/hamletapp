"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAtBottom = useAtBottom;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

function useAtBottom(ref, cb, deps) {
  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      atBottom = _useState2[0],
      setAtBottom = _useState2[1];

  var reset = (0, _react.useCallback)(function () {
    return setAtBottom(false);
  }, []);
  var containerElement = ref === null || ref === void 0 ? void 0 : ref.current;
  var handleScroll = (0, _react.useCallback)(function () {
    if (!(containerElement !== null && containerElement !== void 0 && containerElement.scrollTop) || containerElement.scrollTop < 100) {
      return;
    }

    if ((containerElement === null || containerElement === void 0 ? void 0 : containerElement.scrollTop) + (containerElement === null || containerElement === void 0 ? void 0 : containerElement.clientHeight) + 50 >= (containerElement === null || containerElement === void 0 ? void 0 : containerElement.scrollHeight)) {
      cb();
    }
  }, [].concat((0, _toConsumableArray2["default"])(deps), [containerElement === null || containerElement === void 0 ? void 0 : containerElement.clientHeight, containerElement === null || containerElement === void 0 ? void 0 : containerElement.scrollHeight, containerElement === null || containerElement === void 0 ? void 0 : containerElement.scrollTop]));
  (0, _react.useEffect)(function () {
    containerElement === null || containerElement === void 0 ? void 0 : containerElement.addEventListener("scroll", handleScroll);
    return function () {
      return containerElement === null || containerElement === void 0 ? void 0 : containerElement.removeEventListener("scroll", handleScroll);
    };
  }, [containerElement, handleScroll]);
  return {
    atBottom: atBottom,
    reset: reset
  };
}