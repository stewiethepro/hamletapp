"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.initialState = exports.mapMessage = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _init = require("./actions/init");

var _setView = require("./actions/set-view");

var _toggleInbox = require("./actions/toggle-inbox");

var _markAllRead = require("./actions/mark-all-read");

var _newMessage = require("./actions/new-message");

var _rehydrateMessages = require("./actions/rehydrate-messages");

var _markMessageArchived = require("./actions/mark-message-archived");

var _markMessageRead = require("./actions/mark-message-read");

var _markMessageUnread = require("./actions/mark-message-unread");

var _fetchUnreadMessageCount = require("./actions/fetch-unread-message-count");

var _fetchMessages = require("./actions/fetch-messages");

var _fetchMessageLists = require("./actions/fetch-message-lists");

var _setCurrentTab = require("./actions/set-current-tab");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var mapMessage = function mapMessage(message) {
  return {
    blocks: message.content.blocks,
    body: message.content.body,
    created: message.created,
    data: message.content.data,
    messageId: message.messageId,
    read: message.read,
    title: message.content.title,
    trackingIds: message.content.trackingIds
  };
};

exports.mapMessage = mapMessage;
var initialState = {
  isOpen: false,
  messages: [],
  view: "messages",
  unreadMessageCount: 0
};
exports.initialState = initialState;

var _default = function _default() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action === null || action === void 0 ? void 0 : action.type) {
    case _init.INBOX_INIT:
      {
        return _objectSpread(_objectSpread({}, state), action.payload);
      }

    case _setView.INBOX_SET_VIEW:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          view: action.payload
        });
      }

    case _toggleInbox.INBOX_TOGGLE:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          isOpen: typeof action.payload === "boolean" ? action.payload : !state.isOpen
        });
      }

    case _setCurrentTab.INBOX_SET_CURRENT_TAB:
      {
        var newTab = action.payload;

        if (newTab.state) {
          return _objectSpread(_objectSpread(_objectSpread({}, state), newTab.state), {}, {
            currentTab: action.payload
          });
        }

        return _objectSpread(_objectSpread({}, state), {}, {
          currentTab: action.payload
        });
      }

    case _fetchUnreadMessageCount.INBOX_FETCH_UNREAD_MESSAGE_COUNT_DONE:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          unreadMessageCount: action.payload
        });
      }

    case _fetchMessageLists.INBOX_FETCH_MESSAGE_LISTS_PENDING:
      return _objectSpread(_objectSpread({}, state), {}, {
        isLoading: true
      });

    case _fetchMessages.INBOX_FETCH_MESSAGES_PENDING:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          isLoading: true
        });
      }

    case _fetchMessageLists.INBOX_FETCH_MESSAGE_LISTS_ERROR:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          isLoading: false
        });
      }

    case _fetchMessages.INBOX_FETCH_MESSAGES_ERROR:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          isLoading: false
        });
      }

    case _rehydrateMessages.INBOX_REHYDRATE_MESSAGES:
      {
        var _state$tabs, _newTabs$;

        var bailOnRehydrate = false; // tabs mismatch

        if (!state.tabs && action.payload.tabs) {
          return state;
        } // tabs aren't being used


        if (!state.tabs && action.payload.messages) {
          return _objectSpread(_objectSpread({}, state), {}, {
            messages: action.payload.messages,
            startCursor: action.payload.startCursor,
            unreadMessageCount: action.payload.unreadMessageCount
          });
        }

        var newTabs = (_state$tabs = state.tabs) === null || _state$tabs === void 0 ? void 0 : _state$tabs.map(function (tab) {
          var _action$payload, _action$payload$tabs;

          var matchingTab = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$tabs = _action$payload.tabs) === null || _action$payload$tabs === void 0 ? void 0 : _action$payload$tabs.find(function (t) {
            return t.id === tab.id;
          }); // tabs mismatch

          if (!matchingTab) {
            bailOnRehydrate = true;
            return tab;
          }

          return _objectSpread(_objectSpread({}, tab), {}, {
            state: matchingTab.state
          });
        });

        if (bailOnRehydrate) {
          return state;
        }

        return _objectSpread(_objectSpread(_objectSpread({}, state), newTabs === null || newTabs === void 0 ? void 0 : (_newTabs$ = newTabs[0]) === null || _newTabs$ === void 0 ? void 0 : _newTabs$.state), {}, {
          tabs: newTabs,
          unreadMessageCount: action.payload.unreadMessageCount
        });
      }

    case _fetchMessageLists.INBOX_FETCH_MESSAGE_LISTS_DONE:
      {
        var _state$tabs2;

        var _newTabs = (_state$tabs2 = state.tabs) === null || _state$tabs2 === void 0 ? void 0 : _state$tabs2.map(function (tab) {
          var _action$payload2, _listState$messages;

          var listState = (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2[tab.id];
          return _objectSpread(_objectSpread({}, tab), {}, {
            state: _objectSpread(_objectSpread({}, listState), {}, {
              messages: listState === null || listState === void 0 ? void 0 : (_listState$messages = listState.messages) === null || _listState$messages === void 0 ? void 0 : _listState$messages.map(mapMessage)
            })
          });
        });

        var currentTab = _newTabs === null || _newTabs === void 0 ? void 0 : _newTabs.find(function (tab) {
          var _state$currentTab;

          return tab.id === ((_state$currentTab = state.currentTab) === null || _state$currentTab === void 0 ? void 0 : _state$currentTab.id);
        });
        return _objectSpread(_objectSpread(_objectSpread({}, state), currentTab === null || currentTab === void 0 ? void 0 : currentTab.state), {}, {
          isLoading: false,
          tabs: _newTabs
        });
      }

    case _fetchMessages.INBOX_FETCH_MESSAGES_DONE:
      {
        var _state$tabs3, _state$currentTab2, _action$meta2;

        var mappedMessages = action.payload.messages.map(mapMessage);

        if (!state.tabs) {
          var _state$messages;

          var _newMessages = action.payload.appendMessages ? [].concat((0, _toConsumableArray2["default"])((_state$messages = state === null || state === void 0 ? void 0 : state.messages) !== null && _state$messages !== void 0 ? _state$messages : []), (0, _toConsumableArray2["default"])(mappedMessages)) : mappedMessages;

          return _objectSpread(_objectSpread({}, state), {}, {
            isLoading: false,
            startCursor: action.payload.startCursor,
            messages: _newMessages
          });
        }

        var newMessages = [];
        var tabs = (_state$tabs3 = state.tabs) === null || _state$tabs3 === void 0 ? void 0 : _state$tabs3.map(function (tab) {
          var _action$meta, _tab$state$messages, _tab$state;

          if (tab.id !== ((_action$meta = action.meta) === null || _action$meta === void 0 ? void 0 : _action$meta.tabId)) {
            return tab;
          }

          newMessages = action.payload.appendMessages ? [].concat((0, _toConsumableArray2["default"])((_tab$state$messages = (_tab$state = tab.state) === null || _tab$state === void 0 ? void 0 : _tab$state.messages) !== null && _tab$state$messages !== void 0 ? _tab$state$messages : []), (0, _toConsumableArray2["default"])(mappedMessages)) : mappedMessages;
          return _objectSpread(_objectSpread({}, tab), {}, {
            state: {
              startCursor: action.payload.startCursor,
              messages: newMessages
            }
          });
        });

        if (((_state$currentTab2 = state.currentTab) === null || _state$currentTab2 === void 0 ? void 0 : _state$currentTab2.id) !== ((_action$meta2 = action.meta) === null || _action$meta2 === void 0 ? void 0 : _action$meta2.tabId)) {
          return _objectSpread(_objectSpread({}, state), {}, {
            isLoading: false,
            tabs: tabs
          });
        }

        return _objectSpread(_objectSpread({}, state), {}, {
          isLoading: false,
          messages: newMessages,
          startCursor: action.payload.startCursor,
          tabs: tabs
        });
      }

    case _markMessageRead.INBOX_MARK_MESSAGE_READ:
      {
        var _state$unreadMessageC, _currentTab$filters, _state$messages3, _state$tabs5;

        var unreadMessageCount = Math.max(((_state$unreadMessageC = state.unreadMessageCount) !== null && _state$unreadMessageC !== void 0 ? _state$unreadMessageC : 0) - 1, 0);
        var _currentTab = state.currentTab;

        if ((_currentTab === null || _currentTab === void 0 ? void 0 : (_currentTab$filters = _currentTab.filters) === null || _currentTab$filters === void 0 ? void 0 : _currentTab$filters.isRead) === false) {
          var _state$messages2, _state$tabs4;

          var _newMessages3 = (_state$messages2 = state.messages) === null || _state$messages2 === void 0 ? void 0 : _state$messages2.filter(function (message) {
            return message.messageId !== action.payload.messageId;
          });

          var _tabs2 = (_state$tabs4 = state.tabs) === null || _state$tabs4 === void 0 ? void 0 : _state$tabs4.map(function (tab) {
            var _tab$state$messages2;

            if (!tab.state) {
              return tab;
            }

            if (tab.filters.isRead === false) {
              tab.state.messages = _newMessages3;
              return tab;
            }

            tab.state.messages = (_tab$state$messages2 = tab.state.messages) === null || _tab$state$messages2 === void 0 ? void 0 : _tab$state$messages2.map(function (message) {
              if (message.messageId === action.payload.messageId) {
                return _objectSpread(_objectSpread({}, message), {}, {
                  read: true
                });
              }

              return message;
            });
            return tab;
          });

          return _objectSpread(_objectSpread({}, state), {}, {
            messages: _newMessages3,
            tabs: _tabs2,
            unreadMessageCount: unreadMessageCount
          });
        } // not on unread tab


        var _newMessages2 = (_state$messages3 = state.messages) === null || _state$messages3 === void 0 ? void 0 : _state$messages3.map(function (message) {
          if (message.messageId === action.payload.messageId) {
            return _objectSpread(_objectSpread({}, message), {}, {
              read: true
            });
          }

          return message;
        });

        var _tabs = (_state$tabs5 = state.tabs) === null || _state$tabs5 === void 0 ? void 0 : _state$tabs5.map(function (tab) {
          var _tab$state$messages4;

          if (!tab.state) {
            return tab;
          }

          if (tab.filters.isRead === false) {
            var _tab$state$messages3;

            tab.state.messages = (_tab$state$messages3 = tab.state.messages) === null || _tab$state$messages3 === void 0 ? void 0 : _tab$state$messages3.filter(function (message) {
              return message.messageId !== action.payload.messageId;
            });
            return tab;
          }

          tab.state.messages = (_tab$state$messages4 = tab.state.messages) === null || _tab$state$messages4 === void 0 ? void 0 : _tab$state$messages4.map(function (message) {
            if (message.messageId === action.payload.messageId) {
              return _objectSpread(_objectSpread({}, message), {}, {
                read: true
              });
            }

            return message;
          });
          return tab;
        });

        return _objectSpread(_objectSpread({}, state), {}, {
          messages: _newMessages2,
          tabs: _tabs,
          unreadMessageCount: unreadMessageCount
        });
      }

    case _markMessageUnread.INBOX_MARK_MESSAGE_UNREAD:
      {
        var _state$unreadMessageC2, _state$messages4, _state$tabs6;

        var _unreadMessageCount = ((_state$unreadMessageC2 = state.unreadMessageCount) !== null && _state$unreadMessageC2 !== void 0 ? _state$unreadMessageC2 : 0) + 1;

        var messageToUnread;

        var _newMessages4 = (_state$messages4 = state.messages) === null || _state$messages4 === void 0 ? void 0 : _state$messages4.map(function (message) {
          if (message.messageId !== action.payload.messageId) {
            return message;
          }

          var newMessage = _objectSpread(_objectSpread({}, message), {}, {
            read: undefined
          });

          messageToUnread = newMessage;
          return newMessage;
        });

        var _tabs3 = (_state$tabs6 = state.tabs) === null || _state$tabs6 === void 0 ? void 0 : _state$tabs6.map(function (tab) {
          if (!tab.state) {
            return tab;
          }

          if (tab.filters.isRead === false) {
            var _tab$state$messages5;

            tab.state.messages = [messageToUnread].concat((0, _toConsumableArray2["default"])((_tab$state$messages5 = tab.state.messages) !== null && _tab$state$messages5 !== void 0 ? _tab$state$messages5 : [])).sort(function (a, b) {
              if (a.created < b.created) {
                return 1;
              }

              if (a.created > b.created) {
                return -1;
              }

              return 0;
            });
            return tab;
          }

          tab.state.messages = _newMessages4;
          return tab;
        });

        return _objectSpread(_objectSpread({}, state), {}, {
          messages: _newMessages4,
          tabs: _tabs3,
          unreadMessageCount: _unreadMessageCount
        });
      }

    case _markMessageArchived.INBOX_MARK_MESSAGE_ARCHIVED:
      {
        var _state$unreadMessageC3, _state$messages5;

        var _unreadMessageCount2 = (_state$unreadMessageC3 = state.unreadMessageCount) !== null && _state$unreadMessageC3 !== void 0 ? _state$unreadMessageC3 : 0;

        var _newMessages5 = (_state$messages5 = state.messages) === null || _state$messages5 === void 0 ? void 0 : _state$messages5.filter(function (message) {
          var isMatching = message.messageId === action.payload.messageId;

          if (isMatching && !message.read) {
            _unreadMessageCount2 = Math.max(_unreadMessageCount2 - 1, 0);
          }

          return !isMatching;
        });

        return _objectSpread(_objectSpread({}, state), {}, {
          messages: _newMessages5,
          unreadMessageCount: _unreadMessageCount2
        });
      }

    case _newMessage.INBOX_NEW_MESSAGE:
      {
        var _state$messages6, _currentTab2$filters, _state$tabs7, _state$unreadMessageC4;

        var newMessage = _objectSpread(_objectSpread({}, action.payload), {}, {
          created: new Date().toISOString()
        });

        var _newMessages6 = [newMessage].concat((0, _toConsumableArray2["default"])((_state$messages6 = state.messages) !== null && _state$messages6 !== void 0 ? _state$messages6 : []));

        var _currentTab2 = state.currentTab;

        if ((_currentTab2 === null || _currentTab2 === void 0 ? void 0 : (_currentTab2$filters = _currentTab2.filters) === null || _currentTab2$filters === void 0 ? void 0 : _currentTab2$filters.isRead) === false && _currentTab2 !== null && _currentTab2 !== void 0 && _currentTab2.state) {
          _currentTab2.state.messages = _newMessages6;
        }

        var _tabs4 = (_state$tabs7 = state.tabs) === null || _state$tabs7 === void 0 ? void 0 : _state$tabs7.map(function (tab) {
          var _tab$state$messages6;

          if (!tab.state || tab.id === (_currentTab2 === null || _currentTab2 === void 0 ? void 0 : _currentTab2.id)) {
            return tab;
          }

          tab.state.messages = [newMessage].concat((0, _toConsumableArray2["default"])((_tab$state$messages6 = tab.state.messages) !== null && _tab$state$messages6 !== void 0 ? _tab$state$messages6 : []));
          return tab;
        });

        return _objectSpread(_objectSpread({}, state), {}, {
          currentTab: _currentTab2,
          tabs: _tabs4,
          unreadMessageCount: ((_state$unreadMessageC4 = state.unreadMessageCount) !== null && _state$unreadMessageC4 !== void 0 ? _state$unreadMessageC4 : 0) + 1,
          messages: _newMessages6
        });
      }

    case _markAllRead.INBOX_MARK_ALL_READ:
      {
        var _currentTab3$filters, _state$messages7, _state$tabs9;

        var _unreadMessageCount3 = 0;
        var _currentTab3 = state.currentTab;

        if ((_currentTab3 === null || _currentTab3 === void 0 ? void 0 : (_currentTab3$filters = _currentTab3.filters) === null || _currentTab3$filters === void 0 ? void 0 : _currentTab3$filters.isRead) === false) {
          var _state$tabs8;

          var _tabs6 = (_state$tabs8 = state.tabs) === null || _state$tabs8 === void 0 ? void 0 : _state$tabs8.map(function (tab) {
            var _tab$state$messages7;

            if (!tab.state) {
              return tab;
            }

            if (tab.filters.isRead === false) {
              tab.state.messages = [];
              return tab;
            }

            tab.state.messages = (_tab$state$messages7 = tab.state.messages) === null || _tab$state$messages7 === void 0 ? void 0 : _tab$state$messages7.map(function (message) {
              return _objectSpread(_objectSpread({}, message), {}, {
                read: true
              });
            });
            return tab;
          });

          return _objectSpread(_objectSpread({}, state), {}, {
            messages: [],
            tabs: _tabs6,
            unreadMessageCount: _unreadMessageCount3
          });
        }

        var _newMessages7 = (_state$messages7 = state.messages) === null || _state$messages7 === void 0 ? void 0 : _state$messages7.map(function (message) {
          return _objectSpread(_objectSpread({}, message), {}, {
            read: true
          });
        });

        var _tabs5 = (_state$tabs9 = state.tabs) === null || _state$tabs9 === void 0 ? void 0 : _state$tabs9.map(function (tab) {
          var _tab$state$messages8;

          if (!tab.state) {
            return tab;
          }

          if (tab.filters.isRead === false) {
            tab.state.messages = [];
            return tab;
          }

          tab.state.messages = (_tab$state$messages8 = tab.state.messages) === null || _tab$state$messages8 === void 0 ? void 0 : _tab$state$messages8.map(function (message) {
            return _objectSpread(_objectSpread({}, message), {}, {
              read: true
            });
          });
          return tab;
        });

        return _objectSpread(_objectSpread({}, state), {}, {
          messages: _newMessages7,
          tabs: _tabs5,
          unreadMessageCount: _unreadMessageCount3
        });
      }
  }

  return state;
};

exports["default"] = _default;