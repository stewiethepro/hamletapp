"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactProvider = require("@trycourier/react-provider");

var _clientGraphql = require("@trycourier/client-graphql");

var _init = require("./actions/init");

var _toggleInbox2 = require("./actions/toggle-inbox");

var _setView2 = require("./actions/set-view");

var _setCurrentTab2 = require("./actions/set-current-tab");

var _markMessageRead3 = require("./actions/mark-message-read");

var _markAllRead = require("./actions/mark-all-read");

var _markMessageUnread3 = require("./actions/mark-message-unread");

var _markMessageArchived3 = require("./actions/mark-message-archived");

var _rehydrateMessages2 = require("./actions/rehydrate-messages");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useInboxActions = function useInboxActions() {
  var _useCourier = (0, _reactProvider.useCourier)(),
      apiUrl = _useCourier.apiUrl,
      clientKey = _useCourier.clientKey,
      dispatch = _useCourier.dispatch,
      inbox = _useCourier.inbox,
      userId = _useCourier.userId,
      userSignature = _useCourier.userSignature;

  var courierClient = (0, _clientGraphql.createCourierClient)({
    apiUrl: apiUrl,
    clientKey: clientKey,
    userId: userId,
    userSignature: userSignature
  });
  var events = (0, _clientGraphql.Events)({
    client: courierClient
  });
  var messages = (0, _clientGraphql.Messages)({
    client: courierClient
  });
  return {
    init: function init(payload) {
      dispatch((0, _init.initInbox)(payload));

      if (payload.isOpen) {
        var _inbox$currentTab, _inbox$currentTab2;

        var meta = {
          tabId: inbox === null || inbox === void 0 ? void 0 : (_inbox$currentTab = inbox.currentTab) === null || _inbox$currentTab === void 0 ? void 0 : _inbox$currentTab.id,
          searchParams: _objectSpread(_objectSpread({}, inbox === null || inbox === void 0 ? void 0 : (_inbox$currentTab2 = inbox.currentTab) === null || _inbox$currentTab2 === void 0 ? void 0 : _inbox$currentTab2.filters), {}, {
            from: inbox === null || inbox === void 0 ? void 0 : inbox.from
          })
        };

        if (payload.tabs) {
          dispatch({
            type: "inbox/FETCH_MESSAGE_LISTS",
            meta: meta,
            payload: function (_payload) {
              function payload() {
                return _payload.apply(this, arguments);
              }

              payload.toString = function () {
                return _payload.toString();
              };

              return payload;
            }(function () {
              return messages.getMessageLists(payload.tabs);
            })
          });
          return;
        }

        dispatch({
          type: "inbox/FETCH_MESSAGES",
          meta: meta,
          payload: function payload() {
            return messages.getMessages(meta.searchParams);
          }
        });
      }
    },
    rehydrateMessages: function rehydrateMessages(payload) {
      dispatch((0, _rehydrateMessages2.rehydrateMessages)(payload));
    },
    toggleInbox: function toggleInbox(isOpen) {
      dispatch((0, _toggleInbox2.toggleInbox)(isOpen));
    },
    setView: function setView(view) {
      dispatch((0, _setView2.setView)(view));
    },
    setCurrentTab: function setCurrentTab(newTab) {
      var _inbox$currentTab3;

      if ((newTab === null || newTab === void 0 ? void 0 : newTab.id) === (inbox === null || inbox === void 0 ? void 0 : (_inbox$currentTab3 = inbox.currentTab) === null || _inbox$currentTab3 === void 0 ? void 0 : _inbox$currentTab3.id)) {
        return;
      }

      dispatch((0, _setCurrentTab2.setCurrentTab)(newTab));
    },
    fetchMessages: function fetchMessages(payload) {
      var _inbox$currentTab4;

      var meta = {
        tabId: inbox === null || inbox === void 0 ? void 0 : (_inbox$currentTab4 = inbox.currentTab) === null || _inbox$currentTab4 === void 0 ? void 0 : _inbox$currentTab4.id,
        searchParams: _objectSpread(_objectSpread({}, payload === null || payload === void 0 ? void 0 : payload.params), {}, {
          from: inbox === null || inbox === void 0 ? void 0 : inbox.from
        })
      };
      dispatch({
        meta: meta,
        payload: function (_payload2) {
          function payload() {
            return _payload2.apply(this, arguments);
          }

          payload.toString = function () {
            return _payload2.toString();
          };

          return payload;
        }(function () {
          return messages.getMessages(meta.searchParams, payload === null || payload === void 0 ? void 0 : payload.after);
        }),
        type: "inbox/FETCH_MESSAGES"
      });
    },
    fetchMessageLists: function fetchMessageLists(tabs) {
      var listParams = tabs === null || tabs === void 0 ? void 0 : tabs.map(function (tab) {
        return _objectSpread(_objectSpread({}, tab), {}, {
          filters: _objectSpread({
            from: inbox.from
          }, tab.filters)
        });
      });

      if (!listParams) {
        return;
      }

      dispatch({
        type: "inbox/FETCH_MESSAGE_LISTS",
        meta: listParams,
        payload: function payload() {
          return messages.getMessageLists(listParams);
        }
      });
    },
    getUnreadMessageCount: function getUnreadMessageCount() {
      dispatch({
        type: "inbox/FETCH_UNREAD_MESSAGE_COUNT",
        payload: function payload() {
          return messages.getMessageCount({
            from: inbox === null || inbox === void 0 ? void 0 : inbox.from,
            isRead: false
          });
        }
      });
    },
    markMessageRead: function () {
      var _markMessageRead2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(messageId, trackingId) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dispatch((0, _markMessageRead3.markMessageRead)(messageId));
                _context.next = 3;
                return events.trackEvent(trackingId);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function markMessageRead(_x, _x2) {
        return _markMessageRead2.apply(this, arguments);
      }

      return markMessageRead;
    }(),
    markAllAsRead: function () {
      var _markAllAsRead = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                dispatch((0, _markAllRead.markAllRead)());
                _context2.next = 3;
                return events.trackEventBatch("read");

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function markAllAsRead() {
        return _markAllAsRead.apply(this, arguments);
      }

      return markAllAsRead;
    }(),
    markMessageUnread: function () {
      var _markMessageUnread2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(messageId, trackingId) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                dispatch((0, _markMessageUnread3.markMessageUnread)(messageId));
                _context3.next = 3;
                return events.trackEvent(trackingId);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function markMessageUnread(_x3, _x4) {
        return _markMessageUnread2.apply(this, arguments);
      }

      return markMessageUnread;
    }(),
    markMessageArchived: function () {
      var _markMessageArchived2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(messageId, trackingId) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                dispatch((0, _markMessageArchived3.markMessageArchived)(messageId));
                _context4.next = 3;
                return events.trackEvent(trackingId);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function markMessageArchived(_x5, _x6) {
        return _markMessageArchived2.apply(this, arguments);
      }

      return markMessageArchived;
    }()
  };
};

var _default = useInboxActions;
exports["default"] = _default;