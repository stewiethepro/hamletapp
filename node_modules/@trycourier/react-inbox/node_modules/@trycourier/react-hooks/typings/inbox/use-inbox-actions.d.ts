import { IInbox, ITab } from "./types";
import { IGetMessagesParams } from "@trycourier/client-graphql";
import { Rehydratemessages } from "./actions/rehydrate-messages";
export interface IFetchMessagesParams {
    params?: IGetMessagesParams;
    after?: string;
}
interface IInboxActions {
    fetchMessageLists: (tabs?: ITab[]) => void;
    fetchMessages: (params?: IFetchMessagesParams) => void;
    getUnreadMessageCount: (params?: IGetMessagesParams) => void;
    init: (inbox: IInbox) => void;
    markAllAsRead: () => void;
    markMessageArchived: (messageId: string, trackingId: string) => Promise<void>;
    markMessageRead: (messageId: string, trackingId: string) => Promise<void>;
    markMessageUnread: (messageId: string, trackingId: string) => Promise<void>;
    rehydrateMessages: (payload: Rehydratemessages["payload"]) => void;
    setCurrentTab: (newTab: ITab) => void;
    setView: (view: "messages" | "preferences") => void;
    toggleInbox: (isOpen?: boolean) => void;
}
declare const useInboxActions: () => IInboxActions;
export default useInboxActions;
//# sourceMappingURL=use-inbox-actions.d.ts.map