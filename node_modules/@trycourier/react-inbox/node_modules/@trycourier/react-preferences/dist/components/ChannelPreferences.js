"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChannelPreferences = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactHooks = require("@trycourier/react-hooks");

var _types = require("../types");

var _ChannelPreferenceStyles = require("./ChannelPreferenceStyles");

var DisplayChannel = function DisplayChannel(channel) {
  return channel.charAt(0).toUpperCase() + channel.slice(1);
};

var Checkmark = function Checkmark() {
  return /*#__PURE__*/_react["default"].createElement(_ChannelPreferenceStyles.Check, {
    viewBox: "0 0 9 8"
  }, /*#__PURE__*/_react["default"].createElement("path", {
    d: "M3.0005 7.09954C2.84689 7.09954 2.69328 7.04074 2.57567 6.92433L0.175512 4.52417C-0.0585039 4.29015 -0.0585039 3.90973 0.175512 3.67571C0.409527 3.4417 0.789953 3.4417 1.02397 3.67571L3.0005 5.65104L7.97603 0.675512C8.21005 0.441496 8.59047 0.441496 8.82449 0.675512C9.0585 0.909527 9.0585 1.28995 8.82449 1.52397L3.42413 6.92433C3.30772 7.04074 3.15411 7.09954 3.0005 7.09954Z"
  }));
};

var DeliveryChannel = function DeliveryChannel(_ref) {
  var channel = _ref.channel,
      handleRouting = _ref.handleRouting,
      checked = _ref.checked;
  return /*#__PURE__*/_react["default"].createElement(_ChannelPreferenceStyles.Channel, null, /*#__PURE__*/_react["default"].createElement("label", null, /*#__PURE__*/_react["default"].createElement(_ChannelPreferenceStyles.Input, {
    type: "checkbox",
    onChange: function onChange() {
      handleRouting(channel);
    },
    checked: checked
  }), /*#__PURE__*/_react["default"].createElement(_ChannelPreferenceStyles.ChannelOption, null, checked && /*#__PURE__*/_react["default"].createElement(Checkmark, null), /*#__PURE__*/_react["default"].createElement("div", null, DisplayChannel(channel)))));
};

var ChannelPreferences = function ChannelPreferences(_ref2) {
  var _preferences$recipien, _filteredPreference$h, _filteredPreference$r;

  var onPreferenceChange = _ref2.onPreferenceChange,
      templateId = _ref2.templateId;
  var preferences = (0, _reactHooks.usePreferences)();

  if (!preferences) {
    return null;
  }

  var filteredPreference = preferences === null || preferences === void 0 ? void 0 : (_preferences$recipien = preferences.recipientPreferences) === null || _preferences$recipien === void 0 ? void 0 : _preferences$recipien.filter(function (p) {
    return p.templateId === templateId;
  })[0];
  var initialState = (_filteredPreference$h = filteredPreference === null || filteredPreference === void 0 ? void 0 : filteredPreference.hasCustomRouting) !== null && _filteredPreference$h !== void 0 ? _filteredPreference$h : false;
  var initialRouting = (_filteredPreference$r = filteredPreference === null || filteredPreference === void 0 ? void 0 : filteredPreference.routingPreferences) !== null && _filteredPreference$r !== void 0 ? _filteredPreference$r : [];

  var _useState = (0, _react.useState)(initialRouting),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      routing = _useState2[0],
      setRouting = _useState2[1];

  var _useState3 = (0, _react.useState)(initialState),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      checked = _useState4[0],
      setChecked = _useState4[1];

  var handleDeliveryChannels = function handleDeliveryChannels() {
    onPreferenceChange({
      hasCustomRouting: !checked,
      status: "OPTED_IN",
      routingPreferences: !checked ? ["email", "push"] : []
    });
    setRouting(["email", "push"]);
    setChecked(!checked);
  };

  var handleRouting = function handleRouting(newChannel) {
    var newRouting = routing.includes(newChannel) ? routing === null || routing === void 0 ? void 0 : routing.filter(function (c) {
      return c !== newChannel;
    }) : routing.concat(newChannel);
    onPreferenceChange({
      routingPreferences: newRouting,
      status: "OPTED_IN",
      hasCustomRouting: true
    });
    setRouting(newRouting);
  };

  var channels = ["email", "push"];
  return /*#__PURE__*/_react["default"].createElement(_ChannelPreferenceStyles.StyledItem, null, /*#__PURE__*/_react["default"].createElement(_ChannelPreferenceStyles.ChannelCustomizationToggle, null, /*#__PURE__*/_react["default"].createElement(_ChannelPreferenceStyles.Input, {
    type: "checkbox",
    checked: checked,
    onClick: handleDeliveryChannels
  }), /*#__PURE__*/_react["default"].createElement("div", null, checked && /*#__PURE__*/_react["default"].createElement(Checkmark, null))), /*#__PURE__*/_react["default"].createElement("div", null, "Customize Delivery Channel"), /*#__PURE__*/_react["default"].createElement(_ChannelPreferenceStyles.Channels, null, checked && channels.map(function (fixedChannels) {
    return /*#__PURE__*/_react["default"].createElement(DeliveryChannel, {
      key: fixedChannels,
      channel: fixedChannels,
      handleRouting: handleRouting,
      checked: routing.includes(fixedChannels)
    });
  })));
};

exports.ChannelPreferences = ChannelPreferences;