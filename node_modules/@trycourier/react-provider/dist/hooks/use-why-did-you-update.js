"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWhyDidYouUpdate = useWhyDidYouUpdate;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function useWhyDidYouUpdate(name, props) {
  // Get a mutable ref object where we can store props ...
  // ... for comparison next time this hook runs.
  var previousProps = (0, _react.useRef)({});
  (0, _react.useEffect)(function () {
    if (previousProps.current) {
      var _previousProps$curren;

      // Get all keys from previous and current props
      var allKeys = Object.keys(_objectSpread(_objectSpread({}, (_previousProps$curren = previousProps.current) !== null && _previousProps$curren !== void 0 ? _previousProps$curren : {}), props)); // Use this object to keep track of changed props

      var changesObj = {}; // Iterate through keys

      allKeys.forEach(function (key) {
        var _previousProps$curren2;

        // If previous is different from current
        if ((previousProps === null || previousProps === void 0 ? void 0 : (_previousProps$curren2 = previousProps.current) === null || _previousProps$curren2 === void 0 ? void 0 : _previousProps$curren2[key]) !== props[key]) {
          var _previousProps$curren3;

          // Add to changesObj
          changesObj[key] = {
            from: previousProps === null || previousProps === void 0 ? void 0 : (_previousProps$curren3 = previousProps.current) === null || _previousProps$curren3 === void 0 ? void 0 : _previousProps$curren3[key],
            to: props[key]
          };
        }
      }); // If changesObj not empty then output to console

      if (Object.keys(changesObj).length) {
        console.log("[why-did-you-update]", name, changesObj);
      }
    } // Finally update previousProps with current props for next hook call


    previousProps.current = props;
  });
}