"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = require("react");

var _clientGraphql = require("@trycourier/client-graphql");

var useCourierActions = function useCourierActions(state, dispatch) {
  return (0, _react.useMemo)(function () {
    var courierClient = (0, _clientGraphql.createCourierClient)({
      apiUrl: state.apiUrl,
      clientKey: state.clientKey,
      userId: state.userId,
      userSignature: state.userSignature
    });
    var initialState = (0, _clientGraphql.InitialState)({
      client: courierClient
    });
    var brands = (0, _clientGraphql.Brands)({
      client: courierClient
    });
    var events = (0, _clientGraphql.Events)({
      client: courierClient
    });
    return {
      init: function () {
        var _init = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(payload) {
          var response;
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  dispatch({
                    type: "root/INIT",
                    payload: payload
                  });
                  _context.next = 3;
                  return initialState.getInitialState({
                    brandId: payload.brandId,
                    skipFetchBrand: Boolean(payload.brand)
                  });

                case 3:
                  response = _context.sent;

                  if (response !== null && response !== void 0 && response.brand) {
                    dispatch({
                      type: "root/GET_BRAND/DONE",
                      payload: response.brand
                    });
                  }

                  dispatch({
                    type: "inbox/FETCH_UNREAD_MESSAGE_COUNT/DONE",
                    payload: response === null || response === void 0 ? void 0 : response.unreadMessageCount
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function init(_x) {
          return _init.apply(this, arguments);
        }

        return init;
      }(),
      initToast: function initToast(payload) {
        dispatch({
          type: "toast/INIT",
          payload: payload
        });
      },
      initInbox: function initInbox(payload) {
        dispatch({
          type: "inbox/INIT",
          payload: payload
        });
      },
      getBrand: function getBrand(brandId) {
        dispatch({
          type: "root/GET_BRAND",
          payload: function payload() {
            return brands.getBrand(brandId);
          }
        });
      },
      setBrand: function setBrand(brand) {
        dispatch({
          type: "root/GET_BRAND/DONE",
          payload: brand
        });
      },
      createTrackEvent: function createTrackEvent(trackingId) {
        dispatch({
          type: "CREATE_TRACKING_EVENT",
          payload: function payload() {
            return events.trackEvent(trackingId);
          }
        });
      },
      createBatchTrackEvent: function createBatchTrackEvent(eventType) {
        dispatch({
          type: "CREATE_TRACKING_EVENT_BATCH",
          payload: function payload() {
            return events.trackEventBatch(eventType);
          }
        });
      }
    };
  }, [state.apiUrl, state.clientKey, state.userId, state.userSignature]);
};

var _default = useCourierActions;
exports["default"] = _default;