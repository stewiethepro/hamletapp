import { ICourierEventCallback } from "./transports/types";
import ReconnectingWebSocket, { ErrorEvent } from "reconnecting-websocket";
import { ErrorEventHandler } from "./types";
export declare class WS {
    connection?: ReconnectingWebSocket;
    private subscriptions;
    private clientKey;
    private connectionTimeout?;
    private onError?;
    private url;
    private userSignature?;
    protected connected: any;
    protected messageCallback: any;
    constructor({ clientKey, options, userSignature, }: {
        clientKey: string;
        options?: {
            connectionTimeout?: number;
            onError?: ErrorEventHandler;
            url?: string;
        };
        userSignature?: string;
    });
    connect(): void;
    _onError(event: ErrorEvent): void;
    _onClose(): void;
    _onOpen(): void;
    _onMessage({ data }: {
        data: string;
    }): void;
    subscribe(channel: string, event: string, callback: ICourierEventCallback): Promise<void>;
    send(message: {
        [key: string]: any;
    }): void;
    unsubscribe(channel: string, event: string): void;
    close(): void;
}
//# sourceMappingURL=ws.d.ts.map